C51 COMPILER V9.51   CYFITTER_CFG                                                          04/24/2016 02:18:54 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2
                    -) PR(.\DP8051_Keil_951\Debug/cyfitter_cfg.lst) OT(0) OJ(.\DP8051_Keil_951\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: cyfitter_cfg.c
   3          * 
   4          * PSoC Creator  3.3 CP2
   5          *
   6          * Description:
   7          * This file contains device initialization code.
   8          * Except for the user defined sections in CyClockStartupError(), this file should not be modified.
   9          * This file is automatically generated by PSoC Creator.
  10          *
  11          ********************************************************************************
  12          * Copyright (c) 2007-2015 Cypress Semiconductor.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          ********************************************************************************/
  17          
  18          #include <string.h>
  19          #include "cytypes.h"
  20          #include "cydevice_trm.h"
  21          #include "cyfitter.h"
  22          #include "CyLib.h"
  23          #include "cyfitter_cfg.h"
  24          
  25          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  26          
  27          
  28          #if defined(__C51__) || defined(__CX51__)
  29                  #define CYPACKED
  30                  #define CYPACKED_ATTR
  31                  #define CYALIGNED
  32                  
  33              #define CY_CFG_UNUSED
  34                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  35          
  36          
  37          
  38                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  39                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  40                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  41          #else
                      #error Unsupported toolchain
              #endif
  44          
  45          
  46          
  47          /* Clock startup error codes                                                   */
  48          #define CYCLOCKSTART_NO_ERROR    0u
  49          #define CYCLOCKSTART_XTAL_ERROR  1u
  50          #define CYCLOCKSTART_32KHZ_ERROR 2u
  51          #define CYCLOCKSTART_PLL_ERROR   3u
  52          
  53          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/24/2016 02:18:54 PAGE 2   

  54          /*******************************************************************************
  55          * Function Name: CyClockStartupError
  56          ********************************************************************************
  57          * Summary:
  58          *  If an error is encountered during clock configuration (crystal startup error,
  59          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  60          *  the customer, this function will stop in an infinite loop.
  61          *
  62          * Parameters:
  63          *   void
  64          *
  65          * Return:
  66          *   void
  67          *
  68          *******************************************************************************/
  69          CY_CFG_UNUSED
  70          static void CyClockStartupError(uint8 errorCode);
  71          CY_CFG_UNUSED
  72          static void CyClockStartupError(uint8 errorCode)
  73          {
  74   1          /* To remove the compiler warning if errorCode not used.                */
  75   1          errorCode = errorCode;
  76   1      
  77   1          /* `#START CyClockStartupError` */
  78   1      
  79   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  80   1          /* we will end up here to allow the customer to implement something to  */
  81   1          /* deal with the clock condition.                                       */
  82   1      
  83   1          /* `#END` */
  84   1      
  85   1          /* If nothing else, stop here since the clocks have not started         */
  86   1          /* correctly.                                                           */
  87   1          while(1) {}
  88   1      }
  89          #endif
  90          
  91          
  92          /*******************************************************************************
  93          * Function Name: ClockSetup
  94          ********************************************************************************
  95          *
  96          * Summary:
  97          *  Performs the initialization of all of the clocks in the device based on the
  98          *  settings in the Clock tab of the DWR.  This includes enabling the requested
  99          *  clocks and setting the necessary dividers to produce the desired frequency. 
 100          *
 101          * Parameters:
 102          *  void
 103          *
 104          * Return:
 105          *  void
 106          *
 107          *******************************************************************************/
 108          static void ClockSetup(void);
 109          static void ClockSetup(void)
 110          {
 111   1              uint32 timeout;
 112   1              uint8 pllLock;
 113   1      
 114   1      
 115   1              /* Configure Digital Clocks based on settings from Clock DWR */
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/24/2016 02:18:54 PAGE 3   

 116   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x0003u);
 117   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG0_CFG0 + 0x2u), 0x1Bu);
 118   1      
 119   1              /* Configure ILO based on settings from Clock DWR */
 120   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02u);
 121   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08u);
 122   1      
 123   1              /* Configure IMO based on settings from Clock DWR */
 124   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03u);
 125   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_3MHZ)));
 126   1      
 127   1              /* Configure PLL based on settings from Clock DWR */
 128   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0008u);
 129   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 130   1              /* Wait up to 250us for the PLL to lock */
 131   1              pllLock = 0u;
 132   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 133   1              { 
 134   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 135   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 136   2              }
 137   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 138   1              if (timeout == 0u)
 139   1              {
 140   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 141   2              }
 142   1      
 143   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 144   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 145   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 146   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 147   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 148   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 149   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 150   1      
 151   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG2) | 0x01u
             -)));
 152   1      }
 153          
 154          
 155          /* Analog API Functions */
 156          
 157          
 158          /*******************************************************************************
 159          * Function Name: AnalogSetDefault
 160          ********************************************************************************
 161          *
 162          * Summary:
 163          *  Sets up the analog portions of the chip to default values based on chip
 164          *  configuration options from the project.
 165          *
 166          * Parameters:
 167          *  void
 168          *
 169          * Return:
 170          *  void
 171          *
 172          *******************************************************************************/
 173          static void AnalogSetDefault(void);
 174          static void AnalogSetDefault(void)
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/24/2016 02:18:54 PAGE 4   

 175          {
 176   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 177   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 178   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 179   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 180   1      }
 181          
 182          
 183          /*******************************************************************************
 184          * Function Name: SetAnalogRoutingPumps
 185          ********************************************************************************
 186          *
 187          * Summary:
 188          * Enables or disables the analog pumps feeding analog routing switches.
 189          * Intended to be called at startup, based on the Vdda system configuration;
 190          * may be called during operation when the user informs us that the Vdda voltage
 191          * crossed the pump threshold.
 192          *
 193          * Parameters:
 194          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 195          *
 196          * Return:
 197          *  void
 198          *
 199          *******************************************************************************/
 200          void SetAnalogRoutingPumps(uint8 enabled)
 201          {
 202   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 203   1              if (enabled != 0u)
 204   1              {
 205   2                      regValue |= 0x00u;
 206   2              }
 207   1              else
 208   1              {
 209   2                      regValue &= (uint8)~0x00u;
 210   2              }
 211   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 212   1      }
 213          
 214          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 215          
 216          
 217          /*******************************************************************************
 218          * Function Name: cyfitter_cfg
 219          ********************************************************************************
 220          * Summary:
 221          *  This function is called by the start-up code for the selected device. It
 222          *  performs all of the necessary device configuration based on the design
 223          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 224          *  as Clocks and Pins as well as any component configuration that is necessary.
 225          *
 226          * Parameters:  
 227          *   void
 228          *
 229          * Return:
 230          *   void
 231          *
 232          *******************************************************************************/
 233          
 234          void cyfitter_cfg(void)
 235          {
 236   1              /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/24/2016 02:18:54 PAGE 5   

 237   1              static const uint8 CYCODE BS_IOPINS0_2_VAL[] = {
 238   1                      0x00u, 0x7Fu, 0x7Fu, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u};
 239   1      
 240   1              /* IOPINS0_6 Address: CYREG_PRT6_DM0 Size (bytes): 8 */
 241   1              static const uint8 CYCODE BS_IOPINS0_6_VAL[] = {
 242   1                      0x00u, 0x08u, 0x08u, 0x00u, 0x08u, 0x00u, 0x00u, 0x00u};
 243   1      
 244   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 245   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 246   1      
 247   1              {
 248   2                      static const uint8 CYCODE cfg_byte_table[] = {
 249   2                              0x0Fu,
 250   2                              0x00u, 0x4Fu, 0x01u, /* Base address 0x004F00 */
 251   2                              /* CYREG_TMR0_CFG0 */
 252   2                              0x0Au, 0x4Bu, 
 253   2                              0x01u, 0x07u, 0x01u, /* Base address 0x010700 */
 254   2                              /* CYDEV_UCFG_B0_P3_ROUTE_BASE + 0x00000080u */
 255   2                              0xEEu, 0x08u, 
 256   2                              0x01u, 0x09u, 0x01u, /* Base address 0x010900 */
 257   2                              /* CYDEV_UCFG_B0_P4_ROUTE_BASE + 0x00000080u */
 258   2                              0xAFu, 0x20u, 
 259   2                              0x01u, 0x0Au, 0x04u, /* Base address 0x010A00 */
 260   2                              /* CYDEV_UCFG_B0_P5_U1_BASE */
 261   2                              0xB8u, 0x20u, 0xBEu, 0x10u, 0xD8u, 0x04u, 0xDFu, 0x01u, 
 262   2                              0x01u, 0x0Bu, 0x01u, /* Base address 0x010B00 */
 263   2                              /* CYDEV_UCFG_B0_P5_ROUTE_BASE */
 264   2                              0x1Fu, 0x20u, 
 265   2                              0x01u, 0x17u, 0x01u, /* Base address 0x011700 */
 266   2                              /* CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080u */
 267   2                              0xE8u, 0x10u, 
 268   2                              0x01u, 0x19u, 0x01u, /* Base address 0x011900 */
 269   2                              /* CYDEV_UCFG_B1_P4_ROUTE_BASE + 0x00000080u */
 270   2                              0xE8u, 0x10u, 
 271   2                              0x01u, 0x42u, 0x02u, /* Base address 0x014200 */
 272   2                              /* CYDEV_UCFG_DSI2_BASE */
 273   2                              0x63u, 0x02u, 
 274   2                              /* CYDEV_UCFG_DSI2_BASE + 0x00000080u */
 275   2                              0xD6u, 0x40u, 
 276   2                              0x01u, 0x43u, 0x04u, /* Base address 0x014300 */
 277   2                              /* CYDEV_UCFG_DSI3_BASE */
 278   2                              0x18u, 0x10u, 
 279   2                              /* CYDEV_UCFG_DSI3_BASE + 0x00000080u */
 280   2                              0xAFu, 0x01u, 0xC6u, 0x10u, 0xEEu, 0x10u, 
 281   2                              0x01u, 0x44u, 0x02u, /* Base address 0x014400 */
 282   2                              /* CYDEV_UCFG_DSI4_BASE */
 283   2                              0x50u, 0x04u, 
 284   2                              /* CYDEV_UCFG_DSI4_BASE + 0x00000080u */
 285   2                              0xD4u, 0x04u, 
 286   2                              0x01u, 0x45u, 0x01u, /* Base address 0x014500 */
 287   2                              /* CYDEV_UCFG_DSI5_BASE + 0x00000080u */
 288   2                              0x94u, 0x08u, 
 289   2                              0x01u, 0x46u, 0x01u, /* Base address 0x014600 */
 290   2                              /* CYDEV_UCFG_DSI6_BASE + 0x00000080u */
 291   2                              0x94u, 0x08u, 
 292   2                              0x01u, 0x47u, 0x01u, /* Base address 0x014700 */
 293   2                              /* CYDEV_UCFG_DSI7_BASE + 0x00000080u */
 294   2                              0x94u, 0x08u, 
 295   2                              0x01u, 0x48u, 0x01u, /* Base address 0x014800 */
 296   2                              /* CYDEV_UCFG_DSI8_BASE + 0x00000080u */
 297   2                              0xB4u, 0x10u, 
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/24/2016 02:18:54 PAGE 6   

 298   2                              0x01u, 0x4Cu, 0x02u, /* Base address 0x014C00 */
 299   2                              /* CYDEV_UCFG_DSI12_BASE + 0x00000080u */
 300   2                              0xB4u, 0x04u, 0xE8u, 0x08u, 
 301   2                      };
 302   2                      /* BYTES: 94 */
 303   2      
 304   2      
 305   2                      CYPACKED typedef struct {
 306   2                              void CYFAR *address;
 307   2                              uint16 size;
 308   2                      } CYPACKED_ATTR cfg_memset_t;
 309   2      
 310   2                      static const cfg_memset_t CYCODE cfg_memset_list [] = {
 311   2                              /* address, size */
 312   2                              {(void CYFAR *)(CYREG_TMR0_CFG0), 12u},
 313   2                              {(void CYFAR *)(CYREG_PRT0_DR), 32u},
 314   2                              {(void CYFAR *)(CYREG_PRT3_DR), 48u},
 315   2                              {(void CYFAR *)(CYREG_PRT12_DR), 16u},
 316   2                              {(void CYFAR *)(CYREG_PRT15_DR), 16u},
 317   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 4096u},
 318   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 319   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
 320   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 321   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
 322   2                      };
 323   2      
 324   2                      uint8 CYDATA i;
 325   2      
 326   2                      /* Zero out critical memory blocks before beginning configuration */
 327   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 328   2                      {
 329   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 330   3                              CYMEMZERO(ms->address, ms->size);
 331   3                      }
 332   2      
 333   2                      cfg_write_bytes_code(cfg_byte_table);
 334   2      
 335   2                      /* Enable digital routing */
 336   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 337   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 338   2      
 339   2                      /* Enable UDB array */
 340   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 341   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 342   2              }
 343   1      
 344   1      
 345   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 346   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT2_DM0), (const void CYCODE *)(BS_IOPINS0_2_VAL), 8u);
 347   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT6_DM0), (const void CYCODE *)(BS_IOPINS0_6_VAL), 8u);
 348   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 349   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 350   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 351   1              {
 352   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 353   2              }
 354   1      
 355   1      
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/24/2016 02:18:54 PAGE 7   

 356   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 357   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 358   1              /* Setup clocks based on selections from Clock DWR */
 359   1              ClockSetup();
 360   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 361   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xB1u : 0x80u));
 362   1      
 363   1              /* Perform basic analog initialization to defaults */
 364   1              AnalogSetDefault();
 365   1      
 366   1              /* Configure alternate active mode */
 367   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 368   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 369   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    743    ----
   CONSTANT SIZE    =    160    ----
   XDATA SIZE       =      9    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
